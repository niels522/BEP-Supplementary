function [XCoordsMain,YCoordsMain,TCoordsMain,XCoordsRef,YCoordsRef,TCoordsRef]=ReadCoords(FileName, InputType, varargin)
%  FileName = 'test.csv';
%  InputType = 'ONI_Red'; % 'ONI_Red' or 'ONI_Green'

        %%%%%   READCOORDS:
        %%%%% reads raw data obtained from SMLM analysis in
        %%%%% NIS-elements (Nikon N-STORM microscope), and extract
        %%%%% coordinates of interest for further processing. It generates
        %%%%% txt files of 3 columns containing XYT coordinates for
        %%%%% further processing.
        %%%%%   
        
        %------------------------------------------------------------------
        % REQUIRED INPUTS:
        % FileName: name of the file with extension, e.g. 'MyFile.txt'
        % InputType: denotes the type of file, type 'N-STORM' for TXT files
        % generated by NIS-elements. 
        % 
        % N.B.
        % only two-channels can be read: main-channel and reference
        % channel. File format should be checked. TXT files are supposed to
        % be 26 columns, columns 4-5-13 are read as X-Y-T (nm, nm, frame)
        %
        %------------------------------------------------------------------
        % OPTIONAL INPUTS:
        % STORMname: name of main channel in TXT, default='647'
        % STORMref: name of ref channel in TXT, default='Beads Drift Correction'
        % 
        %------------------------------------------------------------------
        % OUTPUTS:
        % X-Y-TCoordsMain: X, Y, T coordinates of localization in
        % the main channel, expressed in nanometers and frame number
        %
        % X-Y-TCoordsFid: X, Y, T coordinates of localization in
        % the reference channel (typically fiducial markers), expressed in
        % nanometers and frame number
        % 
        % XYTmain.txt: TXT file containing 3 columns with XYT coordinates
        % of main channel
        %
        % XYTref.txt: TXT file containing 3 columns with XYT coordinates
        % of reference channel
        %------------------------------------------------------------------
tic
% p = inputParser; %init parser object
% validChar = @(x) ischar(x);
% 
% 
% define defaults values for optional param:
% defaultSTORMname = '647'; % main channel name for N-STORM data
% defaultSTORMref = 'Bead Drift Correction'; % ref channel name for N-STORM data
% 
% define required and optional input parameters:
% addRequired(p,'FileName',validChar);
% addRequired(p,'InputType',validChar); 
% 
% addParameter(p,'STORMname', defaultSTORMname, validChar);
% addParameter(p,'STORMref', defaultSTORMref, validChar);
% 
% read input values:
% parse(p,FileName, InputType, varargin{:});
% 
% assign the parsed values:
% FileName = p.Results.FileName; % file name
% InputType = p.Results.InputType;
% STORMname = p.Results.STORMname;
% STORMref = p.Results.STORMref;

disp(InputType)
switch InputType
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%------ TXT file from N-STORM --------------------------------------
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    case 'N-STORM'

        %%%----- Read text file (check format)---
        disp('Importing N-STORM data...');
        fileID = fopen(FileName,'r');
        DataIn = textscan(fileID,'%s %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f','Delimiter','\t','HeaderLines',1); % Saving data as a cell, check the numb of columns 
        fclose(fileID);

        %%%--- Retrieve useful information (channel, corrected XY location and frame number or the localization)
        XCoords = cell2mat(DataIn(4)); %% colum 2 X non drift corrected, 4 X drift corrected
        YCoords = cell2mat(DataIn(5)); %% colum 3 Y non drift corrected, 5 Y drift corrected
        TCoords = cell2mat(DataIn(13)); %% column 13 Frame
        Channel = DataIn(1);
        clear DataIn;

        %%%--- Split channel based on first column and generate output
        %%%--- main channel is first column of TXT file
        ChannelMain=strcmp(Channel{1},STORMname);%Check in the .txt if 647, 405/647 or other
        XCoordsMain=XCoords(ChannelMain);
        YCoordsMain=YCoords(ChannelMain);
        TCoordsMain=TCoords(ChannelMain);
        ChannelRef=strcmp(Channel{1},STORMref);%Check in the .txt the name
        XCoordsRef=XCoords(ChannelRef);
        YCoordsRef=YCoords(ChannelRef);
        TCoordsRef=TCoords(ChannelRef);
        
        %%%--- Export a txt file with XYT coords
        n=length(XCoordsMain);
        nref=length(XCoordsRef);
        A=zeros(n,3);
        Ref=zeros(nref,3);
        A(:,1)=XCoordsMain;
        A(:,2)=YCoordsMain;
        A(:,3)=TCoordsMain;
        Ref(:,1)=XCoordsRef;
        Ref(:,2)=YCoordsRef;
        Ref(:,3)=TCoordsRef;
        save XYTmain.txt A -ascii
        save XYTref.txt Ref -ascii
        
        
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %%%%------  ------------------------------------------
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
%     function can be modified to read different types of inputs by adding
%     additional cases, different from N-STORM

    case 'fiducials'
        %%%----- Read text file (check format)---
        disp('Importing fiducials data...');
        dataMain=FileName(:,2:end);
           
        n=length(dataMain);
        A=zeros(n,3);
        A(:,1)=dataMain(:,2);
        A(:,2)=dataMain(:,3);
        A(:,3)=dataMain(:,1);
        save XYTfids.txt A -ascii

    case 'ONI_Red'

        %%%----- Read text file (check format)---
        disp('Importing ONI red data...');
        data=readmatrix(FileName);
        data(:,2)=data(:,2)+1;          % Change starting frame from 0 to 1
        
        if numel(unique(data(:,1)))==1  % If there is only one channel
           dataMain=data;
           
           n=length(dataMain);
           A=zeros(n,3);
           A(:,1)=dataMain(:,3);
           A(:,2)=dataMain(:,4);
           A(:,3)=dataMain(:,2);
           Ref=[];
           save XYTmain.txt A -ascii
           save XYTref.txt Ref -ascii

        elseif numel(unique(data(:,1)))==2      % If there are two channels
           dataMain=data(any(data(:,1)==1,2),:);
           dataRef=data(any(data(:,1)==0,2),:);
           
            n=length(dataMain);
            nref=length(dataRef);
            A=zeros(n,3);
            Ref=zeros(nref,3);
            A(:,1)=dataMain(:,3);
            A(:,2)=dataMain(:,4);
            A(:,3)=dataMain(:,2);
            Ref(:,1)=dataRef(:,3);
            Ref(:,2)=dataRef(:,4);
            Ref(:,3)=dataRef(:,2);
            save XYTmain.txt A -ascii
            save XYTref.txt Ref -ascii
        end
        
    case 'ONI_Green'

        %%%----- Read text file (check format)---
        disp('Importing ONI green data...');
        data=csvread(FileName, 1,0);
        data(:,2)=data(:,2)+1;
        
        if numel(unique(data(:,1)))==1  % If there is only one channel
           dataMain=data; 
           
           n=length(dataMain);
           A=zeros(n,3);
           A(:,1)=dataMain(:,3);
           A(:,2)=dataMain(:,4);
           A(:,3)=dataMain(:,2);
           Ref=[];
           save XYTmain.txt A -ascii
           save XYTref.txt Ref -ascii

        elseif numel(unique(data(:,1)))==2      % If there are two channels
           dataMain=data(any(data(:,1)==0,2),:);
           dataRef=data(any(data(:,1)==1,2),:);
           
            n=length(dataMain);
            nref=length(dataRef);
            A=zeros(n,3);
            Ref=zeros(nref,3);
            A(:,1)=dataMain(:,3);
            A(:,2)=dataMain(:,4);
            A(:,3)=dataMain(:,2);
            Ref(:,1)=dataRef(:,3);
            Ref(:,2)=dataRef(:,4);
            Ref(:,3)=dataRef(:,2);
            save XYTmain.txt A -ascii
            save XYTref.txt Ref -ascii
        end
        
        
        
        
      
    otherwise
        disp('invalid InputType!');
end
toc
end